<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:contxt="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--注册一个跨域的CORS-->
<!--
            <mvc:cors>
                <mvc:mapping path="/mvc"
                             allowed-origins="http://192.168.1.133:8081"
                             allowed-methods="GET,POST"
                             allowed-headers="Access-Control-Allow-Origin"
                             allow-credentials="true"/>
            </mvc:cors>
        -->

    <!--启用注解扫描-->
    <contxt:component-scan base-package="com.wgc.todo.controller" />


    <!--启用 mvc 的常用注解-->
   <!-- <mvc:annotation-driven  />-->
    <!-- 处理SpringMVC返回json乱码 -->
    <mvc:annotation-driven validator="myValidator">
        <mvc:message-converters>
            <!--StringHttpMessageConverter继承了AbstractHttpMessageConverter
            在客户端向服务器请求时，发送的格式可能是ISO_8859_1，那么想要修改拜编码格式就就要使用到实现类
            StringHttpMessageConverter-->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <!--设置编码格式-->
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <!--属性-->
                <property name="objectMapper">
                    <!--这是一个类-->
                    <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                        <!--看英文的意思是 失败 在 空的 Beans-->
                        <!--在Bean为空的时候失败, 如果设置为true， 传入的字符串为空可能会报错-->
                        <!--不想报错我们可以把failOnEmptyBeans设置为false-->
                        <property name="failOnEmptyBeans" value="false"/>
                        <!--设置类型转换器，从字符串转为日期-->
                        <property name="dateFormat">
                            <!--自定义日期格式-->
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg value="yyyy年MM月dd"/>
                            </bean>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!--将所有的静态资源交还 Servlet 处理-->
    <mvc:default-servlet-handler />



    <!--类型转换器-->
<!--
    <mvc:annotation-driven conversion-service="conversionService" />

    &lt;!&ndash;&ndash;&gt;
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="formatters">
            <set>
                &lt;!&ndash;没有启用注解&ndash;&gt;
               &lt;!&ndash; <bean class="com.wgc.jsonp.date.MyDateFormatter" />&ndash;&gt;
                &lt;!&ndash;启用注解&ndash;&gt;
                <bean class="com.wgc.jsonp.annotations.DateFormIDRealize"></bean>
            </set>
        </property>
    </bean>
-->

    <!--验证配置-->
    <bean id="myValidator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />

        <property name="validationMessageSource" ref="messageSource" />
    </bean>


    <!--负责加载外部语言文件的-->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="classpath:messages/xxxx" />
        <property name="defaultEncoding" value="GBK" />
        <!--<property name="fileEncodings" value="utf-8" />-->
    </bean>
    <!--当通过 Accept-Language 自动确定 Locale 的方式已经满足不了你，-->
    <!--那么你需要试试注册一个 LocaleResolver 来制定 Locale 策略-->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
        <property name="defaultLocale" value="zh"/>
    </bean>



    <bean id="themeSource" class="org.springframework.ui.context.support.ResourceBundleThemeSource">
        <property name="basenamePrefix" value="themes." /> <!-- 哪个文件夹里 -->
    </bean>
    <bean id="themeResolver" class="org.springframework.web.servlet.theme.SessionThemeResolver">
        <property name="defaultThemeName" value="girl" /> <!-- 默认主题文件的名字是 "可爱的小粉红"，如果不设置，名为 theme -->
    </bean>


    <!--配置返回页面-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!--配置上传下载-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver" />
    <!--<bean id="multipartResolver2" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
        <!--<property name="maxUploadSize" value="10240000" />-->
        <!--<property name="defaultEncoding" value="UTF-8" />-->
    <!--</bean>-->

</beans>
